# -*- coding: utf-8 -*-
"""Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M_malz65ldwEjGpZD0NAIWEHDMrp87B6
"""

import pandas as pd
import numpy as np
import nltk

from rake_nltk import Rake
from nltk.corpus import stopwords, wordnet
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

pd.set_option('display.max_columns', 100)

nltk.download('punkt')
nltk.download('stopwords')

ratings = pd.read_json('https://raw.githubusercontent.com/brenocsp/hybrid-recommender/main/datasets/ratings.jsonl', lines=True)
ratings.head()

content = pd.read_json('https://raw.githubusercontent.com/brenocsp/hybrid-recommender/main/datasets/content.jsonl', lines=True)
content.head()

targets = pd.read_csv('https://raw.githubusercontent.com/brenocsp/hybrid-recommender/main/datasets/targets.csv')
targets.head()

df = content[['ItemId','Genre']].copy()

# putting the genres in a list of words
df['Genre'] = df['Genre'].map(lambda x: x.lower().split(','))
df.set_index('ItemId', inplace = True)
df.head()

df['bag_of_words'] = ''
columns = df.columns
for index, row in df.iterrows():
    words = ''
    for col in columns:
        if col != 'Director':
            words = words + ' '.join(row[col])+ ' '
        else:
            words = words + row[col]+ ' '
    row['bag_of_words'] = words
    
df.drop(columns = [col for col in df.columns if col!= 'bag_of_words'], inplace = True)

df.head()

# instantiating and generating the count matrix
count = CountVectorizer()
count_matrix = count.fit_transform(df['bag_of_words'])

# creating a Series for the movie titles so they are associated to an ordered numerical
# list I will use later to match the indexes
indices = pd.Series(df.index)
indices[:5]

# generating the cosine similarity matrix
cosine_sim = cosine_similarity(count_matrix, count_matrix)
cosine_sim

# function that takes in movie id as input and returns the top 10 recommended movies
def recommendations(ItemId, cosine_sim = cosine_sim):
    
    recommended_movies = []
    
    # gettin the index of the movie that matches the id
    idx = indices[indices == ItemId].index[0]

    # creating a Series with the similarity scores in descending order
    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)

    # getting the indexes of the 10 most similar movies
    top_10_indexes = list(score_series.iloc[1:11].index)
    
    # populating the list with the ids of the best 10 matching movies
    for i in top_10_indexes:
        recommended_movies.append(list(df.index)[i])
        
    return recommended_movies

print(recommendations('c9f0f895fb'))